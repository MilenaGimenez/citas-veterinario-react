{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","mensajeEnviado","setMensajeEnviado","handlerState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","setTimeout","type","placeholder","onChange","Cita","eliminarCita","onClick","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a6706ae.chunk.js","sourcesContent":["import {useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid'; \r\nimport PropTypes from 'prop-types'\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n    //Creando el estado de las citas\r\n    const [cita, setCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    //Creando el estado del error\r\n    const [error, setError] = useState(false);\r\n\r\n    //Creando estado para dar mensaje al usuario que sus datos fueron guardados exitosamente\r\n    const [mensajeEnviado, setMensajeEnviado] = useState(false);\r\n\r\n    const handlerState = e => {\r\n        setCita({\r\n            ...cita,//hacer la copia para que se guarde todo\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }; \r\n\r\n    //Extraer valores de las citas\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    //Cuando el usuario presione agregar cita\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n    // Validar\r\n    if(\r\n      mascota.trim() === '' || \r\n      propietario.trim() === '' || \r\n      fecha.trim() === '' || \r\n      hora.trim() === '' || \r\n      sintomas.trim() === '' \r\n    ){\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n\r\n    // Agregar un Id\r\n    cita.id = uuidv4();\r\n\r\n    // Crear una cita\r\n    crearCita(cita)\r\n\r\n    // Mostramos mensaje de éxito\r\n    setMensajeEnviado(true)\r\n\r\n    // ocultando el mensaje de éxito\r\n    setTimeout(() => {\r\n      setMensajeEnviado(false);\r\n    }, 3000);\r\n\r\n    // Limpiar Formulario\r\n    setCita({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    })\r\n    \r\n  }\r\n\r\n    return(\r\n        <>\r\n            <h2>Crear cita</h2>\r\n\r\n            {/* {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null} */}\r\n            {error && <p className=\"alerta-error\">Todos los campos son obligatorios</p>}\r\n            {mensajeEnviado && <p className=\"alerta-enviado\">Sus datos fueron guardados con éxito</p>}\r\n            {/* //circuito corto */}\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre de Mascota</label>\r\n                <input                     \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre mascota\"\r\n                    value={mascota}\r\n                    onChange={handlerState}\r\n                />\r\n\r\n                <label>Nombre del dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del dueño de la mascota\"\r\n                    value={propietario}\r\n                    onChange={handlerState}\r\n                />\r\n\r\n                <label>Fecha ingreso</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    value={fecha}\r\n                    onChange={handlerState}\r\n                />\r\n\r\n                <label>Hora de ingreso</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    value={hora}\r\n                    onChange={handlerState}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"¿Cuáles son los síntomas?\"\r\n                    value={sintomas}\r\n                    onChange={handlerState}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Agregar Cita\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Formulario;","import PropTypes from 'prop-types'\r\n\r\nconst Cita = ({\r\n    cita: {mascota, propietario, fecha, hora, sintomas, id}, eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{mascota}</span></p>\r\n            <p>Propietario: <span>{propietario}</span></p>\r\n            <p>Fecha: <span>{fecha}</span></p>\r\n            <p>Hora: <span>{hora}</span></p>\r\n            <p>Síntomas: <span>{sintomas}</span></p>\r\n            <button \r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(id)}\r\n            //es una funcion anonima para que espere al click y no se ejecute sola\r\n            >Eliminar &times;</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Cita;","import {useState} from 'react';\nimport {useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n  //estado de todas las citas\n  const [citas, setCitas] = useState(JSON.parse(localStorage.getItem('citas')) || [])\n\n  useEffect(() => {\n    localStorage.setItem('citas', JSON.stringify(citas))    \n  }, [citas]);\n\n  //funcion que tome todas las citas actuales y agregue una\n  const crearCita = cita => {\n    setCitas([ //traemos las citas y le agregamos el obj de cita\n      ...citas,\n      cita\n    ]);\n  };\n\n  //Funcion encargada de eliminar las citas\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    //este filtro retorna las citas que no tengan el mismo id de la que queremos eliminar\n    setCitas(nuevasCitas)\n  }\n\n  return (\n    <div>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n            crearCita={crearCita}//componente tiene acceso a esa funcion\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{citas.length === 0 ? 'No hay citas' : 'Administra tus citas'}</h2>\n            {citas.map(cita => (\n              <Cita \n              cita={cita} \n              key={cita.id}\n              eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}